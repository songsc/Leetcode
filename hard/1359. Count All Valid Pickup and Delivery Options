/*
 * Easy if the math behind is undertood.
 * There is only one way to do one pickup/delivery. This is the base case
 * For the second pickup, it can be done before the first pickup, between the first pickup and delivery, or after the first delivery.
 * For the second delivery, it can only be done after the second pickup. Depending on when the second pickup is done, there are 3, 2, 1 choices respectively.
 * For n pickup/delivery pairs, there are 2n + 1 possibilities to do the (n + 1)-th pickup, and for (n + 1)-th delivery, there are 2n + 1, 2n, 2n - 1, ... 1 possibilities. 
 * Therefore the recurrence formula is: dp[i] = dp[i - 1] * sum((i - 1) * 2 + 1)
 */

func countOrders(n int) int {
    dp := make([]int64, n + 1)

    dp[1] = 1
    for i := 2; i <= n; i++ {
        dp[i] = dp[i-1] * sum(int64((i - 1) * 2 + 1)) % (1000000007)
    }

    return int(dp[n] % (1000000007))
}

func sum(i int64) int64 {
    if i % 2 == 0 {
        return (i + 1) * i / 2
    } else {
        return i + i * (i - 1) / 2 
    }
}
