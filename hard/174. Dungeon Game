/**
 * DP problem with some corner cases to consider.
 * When the knight is on an edge or at a corner, that's literally an edge case and/or corner condition.
 * The knight must have at least 1 HP at the end.
 * The knight must always have positive HP at any step.
 * Assume the knight has 1 HP at the end, work backward to find out the minimum HP required at each step.
 */

func calculateMinimumHP(dungeon [][]int) int {
    m, n := len(dungeon), len(dungeon[0])
    hp := make([][]int, m) // HP required to survive when entering the square
    for i := range hp {
        hp[i] = make([]int, n)
    }
    
    for i := m - 1; i >= 0; i-- {
        for j := n - 1 ; j >= 0; j-- {
            if i == m - 1 && j == n - 1 {
                if dungeon[i][j] > 0 {
                    hp[i][j] = 1
                } else {
                    hp[i][j] -= dungeon[i][j] - 1
                }

                continue
            }

            // Literal corner cases and edge cases
            if i == m - 1 || j == n - 1 {
                if i == m - 1 {
                    hp[i][j] = hp[i][j+1] - dungeon[i][j]
                } else {
                    hp[i][j] = hp[i+1][j] - dungeon[i][j]
                }
            } else {
                if hp[i+1][j] < hp[i][j+1] {
                    hp[i][j] = hp[i+1][j] - dungeon[i][j]
                } else {
                    hp[i][j] = hp[i][j+1] - dungeon[i][j]
                }
            }

            // HP can never dip below 1
            if hp[i][j] <= 0 {
                hp[i][j] = 1
            }
        }
    }

    return hp[0][0]
}
