/**
 * A combination of sliding window and binary search.
 * Not easy to understand but once understood solution is easy to implement.
 */

func minOperations(nums []int) int {
    sort.Ints(nums)
    
    unique := 1
    for i := 1; i < len(nums); i++ {
        if nums[i] != nums[i - 1] {
            nums[unique] = nums[i]
            unique++
        }
    }

    min := len(nums)
    for i, j := 0, 0; i < len(nums); i++ {
        for ; j < unique && nums[j] - nums[i] < len(nums); j++ {}
        min = int(math.Min(float64(min), float64(len(nums) - (j - i))))
    }

    return min
}
